groups:
- name: Install ingress-kubo
  jobs:
  - install-ingress-kubo
- name: vSphere NSX-V LB setup
  jobs:
  - configure-vsphere-nxsv-lb-ingress-kubo

resources:
- name: pcf-pipelines-utils
  type: git
  source:
    uri: https://github.com/pivotalservices/concourse-pipeline-samples.git

- name: ingress-kubo-poc
  type: git
  source:
    uri: https://github.com/datianshi/ingress-kubo-poc.git

jobs:
- name: install-ingress-kubo
  plan:
  - get: pcf-pipelines-utils
  - get: ingress-kubo-poc
  - task: install-ingress-nginx
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/pks-kubectl
      inputs:
        - name: pcf-pipelines-utils
        - name: ingress-kubo-poc
      run:
        path: bash
        args:
        - -ec
        - |
          echo "Login to PKS API [$PCF_PKS_API]"
          pks login -a "$PCF_PKS_API" -u "$PKS_CLI_USERNAME" -p "$PKS_CLI_PASSWORD" --skip-ssl-verification # TBD --ca-cert CERT-PATH
          echo "Retrieve cluster credentials and configuration for [${PKS_CLUSTER_NAME}]"
          pks get-credentials "${PKS_CLUSTER_NAME}"

          if [[ "$PKS_SKIP_TLS_VERIFY" == "true" ]]; then
            kubectl config set-cluster "${PKS_CLUSTER_NAME}" --certificate-authority=""
            kubectl config set-cluster "${PKS_CLUSTER_NAME}" --insecure-skip-tls-verify=true
          fi

          echo "Switch kubectl context to [${PKS_CLUSTER_NAME}]"
          kubectl config use-context cluster1
          kubectl cluster-info

          echo "Installing ingress-nginx..."
          pushd ingress-kubo-poc
          ./install-ingress-nginx.sh
          echo "Installing ingress-istio..."
          curl -L https://git.io/getLatestIstio | sh -
          pushd istio*
          export PATH="$PATH:$PWD/bin"
          kubectl apply -f install/kubernetes/istio.yaml
          popd
          popd
          echo "Inspect ingress services and pods..."
          kubectl get services -n ingress-nginx
          kubectl get pods -n ingress-nginx
          kubectl get service istio-ingress -n istio-system

    params:
      PCF_PKS_API: ((pcf_pks_api))
      PCF_PKS_DOMAIN: ((pcf_pks_domain))
      PKS_CLI_USERNAME: ((pks_cli_username))
      PKS_CLI_PASSWORD: ((pks_cli_password))
      PKS_CLUSTER_NAME: ((pks_cluster_name))
      PKS_CLUSTER_MASTER_HOSTNAME: ((pks_cluster_master_node_hostname))
      PKS_SKIP_TLS_VERIFY: true

- name: configure-vsphere-nxsv-lb-ingress-kubo
  plan:
  - get: pcf-pipelines-utils
  - task: install-ingress-nginx
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/pks-kubectl
      inputs:
        - name: pcf-pipelines-utils
      outputs:
        - name: istio-ingress-https-pool-data
        - name: istio-ingress-http-pool-data
        - name: nginx-ingress-https-pool-data
        - name: nginx-ingress-http-pool-data
      run:
        path: bash
        args:
        - -ec
        - |
          echo "Login to PKS API [$PCF_PKS_API]"
          pks login -a "$PCF_PKS_API" -u "$PKS_CLI_USERNAME" -p "$PKS_CLI_PASSWORD" --skip-ssl-verification # TBD --ca-cert CERT-PATH
          echo "Retrieve cluster credentials and configuration for [${PKS_CLUSTER_NAME}]"
          pks get-credentials "${PKS_CLUSTER_NAME}"

          if [[ "$PKS_SKIP_TLS_VERIFY" == "true" ]]; then
            kubectl config set-cluster "${PKS_CLUSTER_NAME}" --certificate-authority=""
            kubectl config set-cluster "${PKS_CLUSTER_NAME}" --insecure-skip-tls-verify=true
          fi

          echo "Switch kubectl context to [${PKS_CLUSTER_NAME}]"
          kubectl config use-context cluster1
          kubectl cluster-info

          echo "Inspect ingress services and pods..."
          kubectl get services -n ingress-nginx
          kubectl get service istio-ingress -n istio-system

          ### For vSphere NSX-V only - meatadata for load balancer config

          cluster_worker_nodes_ips=$(kubectl -o jsonpath='{.items[*].status.addresses[0].address}' get nodes)

          # create NSXV pool_config_file for istio-ingress HTTPS
          echo "Creatinf metadata for istio-ingress HTTPS"
          pool_config_file=./istio-ingress-https-pool-data/pool_config.yml
          echo "application-name: ${PKS_CLUSTER_NAME}-istio-https" >> $pool_config_file
          echo "application-domain: istioingress.${PCF_PKS_DOMAIN}" >> $pool_config_file
          istio_ingress_port=$(kubectl get service istio-ingress -n istio-system -o json | jq -rc '.spec.ports[] | select(.name=="https") | .nodePort')
          echo "application-port-number: ${istio_ingress_port}" >> $pool_config_file
          echo "pool-ips: ${cluster_worker_nodes_ips}" >> $pool_config_file
          echo "pool-name-prefix: pks" >> $pool_config_file
          cat $pool_config_file

          # create NSXV pool_config_file for istio-ingress HTTP
          echo "Creatinf metadata for istio-ingress HTTP"
          pool_config_file=./istio-ingress-http-pool-data/pool_config.yml
          echo "application-name: ${PKS_CLUSTER_NAME}-istio-http" >> $pool_config_file
          echo "application-domain: istioingress.${PCF_PKS_DOMAIN}" >> $pool_config_file
          istio_ingress_port=$(kubectl get service istio-ingress -n istio-system -o json | jq -rc '.spec.ports[] | select(.name=="http") | .nodePort')
          echo "application-port-number: ${istio_ingress_port}" >> $pool_config_file
          echo "pool-ips: ${cluster_worker_nodes_ips}" >> $pool_config_file
          echo "pool-name-prefix: pks" >> $pool_config_file
          cat $pool_config_file

          # create NSXV pool_config_file for nginx-ingress HTTPS
          echo "Creatinf metadata for nginx-ingress HTTPS"
          pool_config_file=./nginx-ingress-https-pool-data/pool_config.yml
          echo "application-name: ${PKS_CLUSTER_NAME}-nginx-https" >> $pool_config_file
          echo "application-domain: nginxingress.${PCF_PKS_DOMAIN}" >> $pool_config_file
          nginx_ingress_port=$(kubectl get services -n ingress-nginx -o json | jq -rc '.items[] | select(.metadata.name=="ingress-nginx") | .spec.ports[] | select(.name=="https") | .nodePort')
          echo "application-port-number: ${nginx_ingress_port}" >> $pool_config_file
          echo "pool-ips: ${cluster_worker_nodes_ips}" >> $pool_config_file
          echo "pool-name-prefix: pks" >> $pool_config_file
          cat $pool_config_file

          # create NSXV pool_config_file for nginx-ingress HTTP
          echo "Creatinf metadata for nginx-ingress HTTP"
          pool_config_file=./nginx-ingress-http-pool-data/pool_config.yml
          echo "application-name: ${PKS_CLUSTER_NAME}-nginx-http" >> $pool_config_file
          echo "application-domain: nginxingress.${PCF_PKS_DOMAIN}" >> $pool_config_file
          nginx_ingress_port=$(kubectl get services -n ingress-nginx -o json | jq -rc '.items[] | select(.metadata.name=="ingress-nginx") | .spec.ports[] | select(.name=="http") | .nodePort')
          echo "application-port-number: ${nginx_ingress_port}" >> $pool_config_file
          echo "pool-ips: ${cluster_worker_nodes_ips}" >> $pool_config_file
          echo "pool-name-prefix: pks" >> $pool_config_file
          cat $pool_config_file

    params:
      PCF_PKS_API: ((pcf_pks_api))
      PCF_PKS_DOMAIN: ((pcf_pks_domain))
      PKS_CLI_USERNAME: ((pks_cli_username))
      PKS_CLI_PASSWORD: ((pks_cli_password))
      PKS_CLUSTER_NAME: ((pks_cluster_name))
      PKS_CLUSTER_MASTER_HOSTNAME: ((pks_cluster_master_node_hostname))
      PKS_SKIP_TLS_VERIFY: true


  - task: configure-nsxv-lb-rules-vip
    file: pcf-pipelines-utils/tasks/vsphere/nsxv/configure-nsxv-lb-rules-vip/task.yml
    input_mapping:
      nsxv-pool-data: istio-ingress-https-pool-data
    params:
      VCENTER_HOST: ((vcenter_host))
      VCENTER_USR: ((vcenter_usr))
      VCENTER_PWD: ((vcenter_pwd))
      VCENTER_DATA_CENTER: ((vcenter_datacenter))
      NSX_EDGE_GEN_NSX_MANAGER_ADDRESS: ((nsxv_manager_address))
      NSX_EDGE_GEN_NSX_MANAGER_ADMIN_USER: ((nsxv_manager_admin_username))
      NSX_EDGE_GEN_NSX_MANAGER_ADMIN_PASSWD: ((nsxv_manager_admin_password))
      NSX_EDGE_GEN_NSX_MANAGER_TRANSPORT_ZONE: ((nsxv_gen_mgr_transport_zone))
      NSX_EDGE_GEN_EDGE_CLUSTER: ((nsxv_gen_edge_cluster))
      NSX_EDGE_GEN_EDGE_DATASTORE: ((vcenter_datastore))
      NSX_EDGE_GEN_NAME: ((nsxv_gen_edge_name))
      NSX_EDGE_GEN_VIP_IP: ((nsxv_gen_vip_ip))
      NSX_EDGE_GEN_VIP_NAME: PKS-APPS
      NSX_EDGE_GEN_VIP_PORT: 443
      NSX_EDGE_GEN_PROFILE_NAME: PKS-HTTPS
      NSX_EDGE_GEN_PROFILE_PROTOCOL: HTTPS
      NSX_EDGE_GEN_ADD_RULE_TO_VIP: true
